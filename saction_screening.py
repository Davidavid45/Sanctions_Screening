# -*- coding: utf-8 -*-
"""Saction_Screening.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QCcGpJ7T6SoyLJU4-bc5yazNkntPBqQ9
"""

import requests
import pandas as pd
from sqlalchemy import create_engine
import pyodbc
import time

# API Keys (Replace with actual keys)
FMP_API_KEY = "HJfy1RsQC9t5jVxZE5W8QWWmdeG9VPlQ"
SANCTIONS_API_KEY = "40230f8afc33e7bd102ddf549f3301ad"

# API Endpoints
FMP_API_URL = f"https://financialmodelingprep.com/api/v3/stock/real-time-price?apikey={FMP_API_KEY}"
SANCTIONS_API_URL = "https://api.opensanctions.org/match/sanctions?algorithm=best"

print("Fetching stock data from FMP API...")
fmp_response = requests.get(FMP_API_URL)
if fmp_response.status_code == 200:
    fmp_data = fmp_response.json().get("stockList", [])
    fmp_df = pd.DataFrame(fmp_data)
    print("FMP Data Retrieved Successfully:")
    print(fmp_df.head())
else:
    print("‚ùå FMP API Request Failed:", fmp_response.status_code, fmp_response.text)
    fmp_df = None

print("Loading static dataset...")
static_df = pd.read_csv("securities.csv")
print("Static Dataset Loaded Successfully:")
static_df.head()

static_df.columns

# Function to Flag Companies from Static Dataset
def flag_static_companies(fmp_df, static_df):
    flagged_static = static_df[static_df['caption'].isin(fmp_df['symbol'])]
    flagged_static = flagged_static[['caption', 'countries', 'sanctioned', 'url', 'datasets']]
    flagged_static.rename(columns={
        'caption': 'Company',
        'countries': 'Jurisdiction',
        'datasets': 'Sanctions List'
    }, inplace=True)
    return flagged_static

print("Unique values in FMP symbols:")
print(fmp_df["symbol"].head(10))

print("Unique values in Static Dataset captions:")
print(static_df["caption"].head(10))

flag_static_companies(fmp_df, static_df)

if fmp_df is not None and not fmp_df.empty:
    company_names = fmp_df["symbol"].tolist()

    batch_size = 100
    max_requests = 45
    company_batches = [company_names[i:i+batch_size] for i in range(0, len(company_names), batch_size)][:max_requests]

    all_flagged_companies = []

    for batch_idx, batch in enumerate(company_batches):
        print(f"Processing batch {batch_idx+1}/{len(company_batches)}...")

        queries = {f"q{i}": {"schema": "Company", "properties": {"name": [name]}} for i, name in enumerate(batch)}
        payload = {"queries": queries}

        headers = {"Authorization": f"ApiKey {SANCTIONS_API_KEY}"}
        sanctions_response = requests.post(SANCTIONS_API_URL, json=payload, headers=headers)

        if sanctions_response.status_code == 200:
            sanctions_data = sanctions_response.json().get("responses", {})

            for key, result in sanctions_data.items():
                if result.get("results", []):
                    first_match = result["results"][0]["properties"]
                    all_flagged_companies.append({
                        "Company": first_match["name"],
                        "Jurisdiction": first_match.get("jurisdiction", "Unknown"),
                        "Sanctions List": result["results"][0]["datasets"]
                    })

            print(f"‚úÖ Batch {batch_idx+1} completed successfully.")

        else:
            print(f"‚ùå OpenSanctions API Request Failed (Batch {batch_idx+1}):",
                  sanctions_response.status_code, sanctions_response.text)

        time.sleep(1)

    flagged_api_df = pd.DataFrame(all_flagged_companies)
    print("üö® Flagged Companies from API:")
    print(flagged_api_df)

else:
    flagged_api_df = pd.DataFrame()

flagged_api_df.info()